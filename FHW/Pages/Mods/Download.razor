@page "/Mods/Download"
@using System.Text.RegularExpressions;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<nav class="navbar bg-body-tertiary">
    <div class="container-fluid">
        <a class="navbar-brand">Состояние клиента: недоступно в данной версии</a>
        <a class="d-flex" href="/about" target="_blank"><Icon Name="IconName.InfoCircle" />&nbsp;О приложении</a>
    </div>
</nav>

<PageTitle>Скачать моды</PageTitle>

@code {
    [Inject] protected ToastService ToastService { get; set; }
    public string? ClientIP { get; set; }

    [Parameter]
    public string ClientStatus { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ClientIP = await JSRuntime.InvokeAsync<string>("getClientIP");
    }


    public IEnumerable<ModsList.Result> mods { get; set; }

    private string _mod;
    public string BaseDependency { get; set; } = "";
    public List<Mod.Dependency> MainDependencies { get; set; } = new List<Mod.Dependency>();
    public List<Mod.Dependency> AdditionalDependencies { get; set; } = new List<Mod.Dependency>();
    public List<Mod.Dependency> BadDependencies { get; set; } = new List<Mod.Dependency>();

    private ModsList.Result? _selectedMod;
    public ModsList.Result? selectedMod 
    {
        get
        {
            return _selectedMod;
        }
        set
        {
            _selectedMod = value;
            selectedVersion = "";
            ClearDependencies();
        }
    }

    public ModObj.Mod? selectedModInfo { get; set; }

    private string _selectedVersion = "";
    public string selectedVersion
    {
        get
        {
            return _selectedVersion;
        }
        set
        {
            if (!String.IsNullOrWhiteSpace(value))
            {
                ClearDependencies();
                foreach (var dep in selectedModInfo.Releases.ToList().Find(x => x.Version == value).InfoJson.Dependencies)
                {
                    string pattern = @"^((?:)|(?:\?)|(?:\(\?\))|(?:!)|(?:~))(?:\s?)([%\w\s-]+)(?:\s{0,})(?:((?:=>)|(?:==)|(?:=)|(?:<=)|(?:>=)|(?:<)|(?:>)|(?:))(?:\s{0,})((\d+\.\d+\.\d+)|(\d+\.\d+)))?$";
                    Match m = Regex.Match(dep, pattern, RegexOptions.IgnoreCase);
                    switch (m.Groups[2].Value.Trim())
                    {
                        case "base":
                            BaseDependency = m.Groups[4].Value;
                            break;
                        default:
                            Mod.Dependency dependency = new Mod.Dependency { Name = m.Groups[2].Value.Trim(), Requirements = m.Groups[3].Value.Trim(), Version = m.Groups[4].Value.Trim() };
                            switch (m.Groups[1].Value)
                            {
                                case "":
                                    MainDependencies.Add(dependency);
                                    break;
                                case "(?)":
                                case "?":
                                    AdditionalDependencies.Add(dependency);
                                    break;
                                case "!":
                                    BadDependencies.Add(dependency);
                                    break;
                            }
                            break;
                    }

                }
            }

            _selectedVersion = value;
        }
    }



    private async Task<AutoCompleteDataProviderResult<ModsList.Result>> ModsDataProvider(AutoCompleteDataProviderRequest<ModsList.Result> request)
    {
        if (mods is null) // pull customers only one time for client-side autocomplete
            mods = GetMods(); // call a service or an API to pull the customers

        return await Task.FromResult(request.ApplyTo(mods.OrderByDescending(mod => mod.DownloadsCount)));
    }

    private IEnumerable<ModsList.Result> GetMods()
    {
        if (!Data.Temp.ModsLoad) return Data.Temp.MainModsList.ToList();
        else return new List<ModsList.Result>();
    }

    private void OnAutoCompleteChanged(ModsList.Result mod, bool selectVersion = true)
    {
        selectedModInfo = null;
        if (!Data.Temp.LastUpdateMods.ContainsKey(mod.Name))
        {
            Data.Temp.LastUpdateMods.Add(mod.Name,
                new Mod.Info
                    {
                        Mod = ModObj.Mod.FromJson(LMC.Web.GetString($"https://mods.factorio.com/api/mods/{mod.Name}/full")),
                        LastUpdate = ((DateTimeOffset)DateTime.Now).ToUnixTimeSeconds()
                    });
        }
        if (((DateTimeOffset)DateTime.Now).ToUnixTimeSeconds() - Data.Temp.LastUpdateMods[mod.Name].LastUpdate > 86400)
        {
            Data.Temp.LastUpdateMods[mod.Name].Mod = ModObj.Mod.FromJson(LMC.Web.GetString($"https://mods.factorio.com/api/mods/{mod.Name}/full"));
            Data.Temp.LastUpdateMods[mod.Name].LastUpdate = ((DateTimeOffset)DateTime.Now).ToUnixTimeSeconds();
        }

        selectedModInfo = Data.Temp.LastUpdateMods[mod.Name].Mod;
        selectedMod = mod;
        BaseDependency = mod.LatestRelease.InfoJson.FactorioVersion;
        if (selectVersion) selectedVersion = selectedMod.LatestRelease.Version;
    }

    private void ClearDependencies()
    {
        MainDependencies.Clear();
        AdditionalDependencies.Clear();
        BadDependencies.Clear();
    }

    private void DownloadMod()
    {
        //NavigationManager.NavigateTo($@"https://official-factorio-mirror.re146.dev/{selectedModInfo.Name}/{selectedVersion}.zip");
        JSRuntime.InvokeAsync<string>("sendRequestToClient");
    }

    private void FindModByName(string Name, string? Version = null)
    {
        var fMod = mods.ToList().Find(x => x.Name == Name);
        if (fMod != null)
        {
            if (String.IsNullOrWhiteSpace(Version)) Version = null;
            if (Version != null) OnAutoCompleteChanged(fMod, false);
            else OnAutoCompleteChanged(fMod, true);
            if (Version != null) selectedVersion = Version;
        }
        else
        {
            ToastService.Notify(new(ToastType.Danger, $"Ошибка: мод не найден"));
        }
    }
}


<div class="p-3">
    <div class="card">
        <div class="card-header text-center">
            <h1>Поиск и скачивание модов</h1>
        </div>
        <div class="card-body">
            <div class="p-3">
                <div class="row">
                    <div class="m-0 p-0">
                        <AutoComplete @bind-Value="_mod"
                                      TItem="ModsList.Result"
                                      DataProvider="ModsDataProvider"
                                      PropertyName="Title"
                                      Placeholder="Enter mod title"
                                      OnChanged="(ModsList.Result mod) => OnAutoCompleteChanged(mod)" />
                    </div>

                </div>
                @if (selectedMod != null && selectedModInfo != null)
                {
                    <div class="row">
                        <div class="input-group p-0 mt-1" role="group" aria-label="Mod controls">
                            <select class="form-control" id="versionSelect" @bind="selectedVersion">
                                <option />
                                @foreach (var release in selectedModInfo?.Releases.OrderByDescending(ver => ver.Version))
                                {
                                    <option value="@release.Version">@release.Version</option>
                                }
                            </select>

                            @if (!String.IsNullOrWhiteSpace(selectedVersion))
                            {
                                <button @onclick="DownloadMod" type="button" class="btn btn-warning">
                                    Download
                                </button>
                                <button type="button" class="btn btn-danger" disabled>
                                    Remove
                                </button>
                                <button type="button" class="btn btn-secondary" disabled>
                                    Open folder
                                </button>
                                <button type="button" class="btn btn-success" disabled>
                                    Launch game
                                </button>
                            }

                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-md-8">
                            <h3>@selectedMod?.Title</h3>
                            <br>
                            <dl class="row">
                                <dt class="col-sm-3">ID:</dt>
                                <dd class="col-sm-9" id="mod-info-name">@selectedMod?.Name</dd>
                                <dt class="col-sm-3">Владелец:</dt>
                                <dd class="col-sm-9" id="mod-info-owner">@selectedMod?.Owner</dd>
                                <dt class="col-sm-3">Категория:</dt>
                                <dd class="col-sm-9" id="mod-info-category">@selectedMod?.Category</dd>
                                <dt class="col-sm-3">Описание:</dt>
                                <dd class="col-sm-9" id="mod-info-summary">@selectedMod?.Summary</dd>
                                <dt class="col-sm-3">Загрузок:</dt>
                                <dd class="col-sm-9" id="mod-info-downloads">@selectedMod?.DownloadsCount</dd>
                                <dt class="col-sm-3">Factorio:</dt>
                                <dd class="col-sm-9" id="mod-info-downloads">@BaseDependency</dd>
                                <dt class="col-sm-3">Актуальная версия:</dt>
                                <dd class="col-sm-9" id="mod-info-downloads">@selectedMod?.LatestRelease.Version</dd>
                            </dl>
                            <br>
                            @if (!String.IsNullOrWhiteSpace(selectedVersion))
                            {
                                <dl class="row">
                                    @if (MainDependencies.Count > 0)
                                    {
                                        <dt class="col-sm-3" id="mod-info-required-dependencies-header">
                                            Требуемые зависимости:
                                        </dt>
                                        <dd class="col-sm-9" id="mod-info-required-dependencies">
                                            <ul>
                                                @foreach (var dep in MainDependencies)
                                                {
                                                    <li><a class="text-success" @onclick="() => FindModByName(dep.Name, dep.Version)">@dep.Name @dep.Requirements @dep.Version</a></li>
                                                }
                                            </ul>
                                        </dd>
                                    }
                                    @if (AdditionalDependencies.Count > 0)
                                    {
                                        <dt class="col-sm-3" id="mod-info-optional-dependencies-header">
                                            Опциональные
                                            зависимости:
                                        </dt>
                                        <dd class="col-sm-9" id="mod-info-optional-dependencies">
                                            <ul>
                                                @foreach (var dep in AdditionalDependencies)
                                                {
                                                    <li><a class="text-warning" @onclick="() => FindModByName(dep.Name, dep.Version)">@dep.Name @dep.Requirements @dep.Version</a></li>
                                                }
                                            </ul>
                                        </dd>
                                    }
                                    @if (BadDependencies.Count > 0)
                                    {
                                        <dt class="col-sm-3" id="mod-info-incompatible-dependencies-header">
                                            Несовместимые моды:
                                        </dt>
                                        <dd class="col-sm-9" id="mod-info-incompatible-dependencies">
                                            <ul>
                                                @foreach (var dep in BadDependencies)
                                                {
                                                    <li><a class="text-danger" @onclick="() => FindModByName(dep.Name)">@dep.Name @dep.Requirements @dep.Version</a></li>
                                                }
                                            </ul>
                                        </dd>
                                    }
                                </dl>
                            }
                        </div>
                        <div class="col-md-4 p-3 text-center">
                            @if (!String.IsNullOrWhiteSpace(selectedVersion) && !String.IsNullOrWhiteSpace(selectedModInfo.Thumbnail))
                            {
                                <div class="float-end">
                                    <img class="rounded-4" src="@($"https://assets-mod.factorio.com{selectedModInfo.Thumbnail}")" style="width: 200px; height:200px" />
                                </div>
                            }
                            else
                            {
                                <div class="float-end">
                                    <Icon class="rounded" Name="IconName.GearFill" style="font-size: 200px!important; color:darkorange" />
                                </div>
                            }
                        </div>
                        
                    </div>
                }

            </div>
        </div>
    </div>
</div>